**DO FIRST:**
BEFORE planning or writing any code, extract the rules from these files:
1. @rubric/RUBRIC.md 
2. @rubric/ARCHITECTURE.yaml 
3. @rubric/GlobalSpecs.rux  
4. @rubric/DesignSystem.rux
THEN incorportate these rules into all future coding plans.

**MANDATORY PROCEDURE - MUST CONFIRM EACH STEP AND TRACK WORKFLOW STATE:**
Before you begin, you MUST:
- Create a numbered checklist of all steps found in the following `WORKFLOW`. This is different from the to-dos you create as a coding plan. This is a procedural plan:
**WORKFLOW:**
```
1. CREATE .rux file first if one does not already exist (use corresponding template in `rubric/templates/[type].rux.template`) 
2. RUN `rubric/validate.js` to ensure .rux files are properly formatted
3. PLAN code to fit constraints  
4. WRITE code following the spec in the rux file AND in the GlobalSpecs.rux file
5. RUN through the "Common Bug Prevention Checklist" in the `rubric/RUBRIC.md` file and fix any issues
6. DOCUMENT the result of this bug checklist in a file called `rubric/BUGS.md` - append if exists
7. RUN `node rubric/validate.js` → MUST show "All constraints passed!" -- DO NOT stop iterating until all validation violations have been resolved. 
8. IF violations exist → fix code (not .rux files)
9. REPEAT steps 4-8 until there are zero remaining violations
```

- Then, as you work, always maintain current status as follows:
```
Now executing...
Workflow Step: X 
Steps Completed: [1, 2, 3...]
Steps Remaining: [4, 5, 6...]
```
- NEVER proceed to next step without explicit completion confirmation:
```
Step X Completed
```

**MANDATORY RUBRIC COMPLIANCE:** 
Before creating ANY new file in `src/`, you MUST first create the corresponding .rux constraint file in `rubric/app/[matching-path]` NO EXCEPTIONS. If you create code without first creating the .rux file, you are violating the architectural law of this project.

**MANDATORY RUBRIC RULES:**
- Constraints are IMMUTABLE - you may not change any code inside `constraints {}` in a .rux file
- If constraints are causing code issues, change the code (js, ts, jsx, etc) NOT the .rux file
- If you cannot move forward by changing the code due to constraints, ask the user
- Constraints trump all other declarations. Example: if an import is `deny` in `constaints {}`, and also `allow` in `imports {}`, the `deny` in `constraints {}` wins
- You must iterate until `validate.js` script results in 0 errors
- The `rubric/validate.js` file is Read-Only and IMMUTABLE - you may not edit it